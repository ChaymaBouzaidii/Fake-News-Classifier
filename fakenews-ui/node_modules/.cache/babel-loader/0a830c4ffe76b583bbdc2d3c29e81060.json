{"ast":null,"code":"var _jsxFileName = \"/home/chayma/Desktop/FakeNews/webapp/fakenews-ui/src/components/nlpinterface.js\";\nimport React from 'react';\nimport { Pipeline } from './pipeline';\nimport axios from 'axios';\nimport './index.scss';\nexport class NLPInterface extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.MIN_WORDS = 25;\n    this.MAX_WORDS = 3500;\n    this.state = {\n      text: '',\n      wordsHint: `You have to write at least ${this.MIN_WORDS} words`,\n      loading: false,\n      error: false,\n      prediction: null,\n      original: null,\n      pos_tagged: null,\n      preprocessed: null,\n      emoji: true\n    };\n\n    this.random = () => axios.get(\"http://0396e8d4.ngrok.io/random\", {\n      mode: 'no-cors'\n    }).then(res => {\n      const data = res.data;\n      this.setState({\n        text: data.text,\n        wordsHint: this.getWordsHint(data.text),\n        prediction: null,\n        original: null,\n        pos_tagged: null,\n        preprocessed: null,\n        emoji: false\n      });\n    });\n\n    this.updateInput = ({\n      target: {\n        value\n      }\n    }) => this.setState({\n      text: value,\n      prediction: null,\n      wordsHint: this.getWordsHint(value)\n    });\n\n    this.getWordsHint = text => {\n      let count = text.split(/\\s/).length;\n      if (count < this.MIN_WORDS) return `You have to write ${this.MIN_WORDS - count} more words`;\n      if (count >= this.MIN_WORDS) return `You can write up to ${this.MAX_WORDS - count} more words`;\n    };\n\n    this.predict = () => {\n      if (this.MAX_WORDS - this.state.text.split(/\\s/).length < 0) return;\n      this.setState({\n        loading: true,\n        prediction: null\n      });\n      axios.post(\"http://0396e8d4.ngrok.io/predict\", {\n        data: {\n          json: JSON.stringify(this.state.text)\n        }\n      }, {\n        mode: 'no-cors'\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n      /*body: JSON.stringify(this.state.text)*/\n      ).then(res => {\n        console.log(res);\n        this.setState({\n          prediction: res.data.prediction\n        });\n      });\n      /*.then(response => response.json())\n      .then(({ original, pos_tagged, preprocessed, prediction }) => {\n        this.setState({ loading: false, prediction, original, pos_tagged, preprocessed })\n      })\n      .catch(error => this.setState({ loading: false, error: true }))*/\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Fake News Classifier\"), React.createElement(\"textarea\", {\n      autoFocus: true,\n      disabled: this.state.loading,\n      value: this.state.text,\n      onChange: this.updateInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"hint\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \" \", this.state.wordsHint), React.createElement(\"button\", {\n      disabled: this.state.loading,\n      className: \"random\",\n      onClick: this.random,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Load random News from test dataset ? \", React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Click here\"), \".\", React.createElement(\"span\", {\n      role: \"img\",\n      className: \"emoji bounce\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, this.state.emoji ? \"👆🏼\" : \"\")), React.createElement(\"button\", {\n      disabled: this.state.loading || this.MIN_WORDS - this.state.text.split(/\\s/).length > 0 || this.MAX_WORDS - this.state.text.split(/\\s/).length < 0,\n      className: \"cta\",\n      onClick: this.predict,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \" Predict \"), this.state.loading ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Classifying ...\") : '', this.state.error ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, \"ERROR\") : '', React.createElement(\"h1\", {\n      className: this.state.prediction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, this.state.prediction), React.createElement(Pipeline, {\n      prediction: this.state.prediction,\n      original: this.state.original,\n      pos_tagged: this.state.pos_tagged,\n      preprocessed: this.state.preprocessed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/chayma/Desktop/FakeNews/webapp/fakenews-ui/src/components/nlpinterface.js"],"names":["React","Pipeline","axios","NLPInterface","Component","MIN_WORDS","MAX_WORDS","state","text","wordsHint","loading","error","prediction","original","pos_tagged","preprocessed","emoji","random","get","mode","then","res","data","setState","getWordsHint","updateInput","target","value","count","split","length","predict","post","json","JSON","stringify","headers","console","log","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Pipeline } from './pipeline';\nimport axios from 'axios';\nimport './index.scss';\nexport class NLPInterface extends React.Component {\n\n  MIN_WORDS = 25;\n  MAX_WORDS = 3500;\n\n  state = {\n    text: '',\n    wordsHint: `You have to write at least ${this.MIN_WORDS} words`,\n    loading: false,\n    error: false,\n    prediction: null,\n    original: null,\n    pos_tagged: null,\n    preprocessed: null,\n    emoji: true\n  }\n\n  random = () => axios.get(\"http://0396e8d4.ngrok.io/random\",{mode:'no-cors'})\n    .then(res => {\n        const data = res.data;\n        this.setState({\n            text: data.text, \n            wordsHint: this.getWordsHint(data.text), \n            prediction: null,\n            original: null,\n            pos_tagged: null,\n            preprocessed: null,\n            emoji: false\n    })\n})\n  /*random = () => fetch(\"https://d9622a36.ngrok.io/random\", {mode:'no-cors'})\n    .then(response => response.json())\n    .then(article => article.title + '\\n\\n' + article.text)\n    .then(text => this.setState({\n      text: text.text, \n      wordsHint: this.getWordsHint(text), \n      prediction: null,\n      original: null,\n      pos_tagged: null,\n      preprocessed: null,\n      emoji: false\n    }))\n    .catch(error => this.setState({ error: true, emoji: false }));*/\n\n  updateInput = ({ target: { value } }) => this.setState({ text: value, prediction: null, wordsHint: this.getWordsHint(value) });\n\n  getWordsHint = (text) => {\n    let count = text.split(/\\s/).length;\n    if (count < this.MIN_WORDS) return `You have to write ${this.MIN_WORDS - count} more words`\n    if (count >= this.MIN_WORDS) return `You can write up to ${this.MAX_WORDS - count} more words`\n  }\n  predict = () => {\n    if (this.MAX_WORDS - this.state.text.split(/\\s/).length < 0) return;\n\n    this.setState({ loading: true, prediction: null });\n    axios.post(\"http://0396e8d4.ngrok.io/predict\",\n    {data:\n        {\n            json: JSON.stringify(this.state.text)\n        }\n    },\n    {mode:'no-cors'},\n    {headers: {\n        'Content-Type': 'application/json',\n      }},\n    /*body: JSON.stringify(this.state.text)*/\n    )\n    .then (res => {\n        console.log(res)\n        this.setState({prediction: res.data.prediction})\n    })\n      /*.then(response => response.json())\n      .then(({ original, pos_tagged, preprocessed, prediction }) => {\n        this.setState({ loading: false, prediction, original, pos_tagged, preprocessed })\n      })\n      .catch(error => this.setState({ loading: false, error: true }))*/\n\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Fake News Classifier</h1>\n        <textarea autoFocus disabled={this.state.loading} value={this.state.text} onChange={this.updateInput}>\n        </textarea>\n\n        <span className=\"hint\"> {this.state.wordsHint}</span>\n\n        <button disabled={this.state.loading} className=\"random\" onClick={this.random}>\n          Load random News from test dataset ? <span>Click here</span>.\n          <span role=\"img\" className=\"emoji bounce\">\n            {this.state.emoji ? \"👆🏼\" : \"\"}\n          </span>\n        </button>\n        <button disabled={\n          this.state.loading ||\n          this.MIN_WORDS - this.state.text.split(/\\s/).length > 0 ||\n          this.MAX_WORDS - this.state.text.split(/\\s/).length < 0} className=\"cta\" onClick={this.predict}> Predict </button>\n\n        {this.state.loading ? <h1>Classifying ...</h1> : ''}\n\n        {this.state.error ? <h1>ERROR</h1> : ''}\n\n        <h1 className={this.state.prediction}>\n          {this.state.prediction}\n        </h1>\n\n        <Pipeline\n          prediction={this.state.prediction}\n          original={this.state.original}\n          pos_tagged={this.state.pos_tagged}\n          preprocessed={this.state.preprocessed}\n        />\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}