{"ast":null,"code":"var _jsxFileName = \"/home/chayma/Desktop/FakeNews/webapp/fakenews-ui/src/components/js/nlpinterface.js\";\nimport React from 'react';\nimport { Model } from './model';\nimport axios from 'axios';\nimport './../css/nlpinterface.scss';\nexport class NLPInterface extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.MIN_WORDS = 25;\n    this.MAX_WORDS = 3500;\n    this.state = {\n      text: '',\n      wordsHint: `You have to write at least ${this.MIN_WORDS} words`,\n      loading: false,\n      error: false,\n      prediction: null,\n      original: null,\n      pos_tagged: null,\n      preprocessed: null\n    };\n\n    this.random = () => axios.get(\"http://8e04a3fc.ngrok.io/random\").then(res => {\n      const data = res.data;\n      this.setState({\n        text: data.text,\n        wordsHint: this.getWordsHint(data.text),\n        prediction: null,\n        original: null,\n        pos_tagged: null,\n        preprocessed: null\n      });\n    });\n\n    this.updateInput = ({\n      target: {\n        value\n      }\n    }) => this.setState({\n      text: value,\n      prediction: null,\n      wordsHint: this.getWordsHint(value)\n    });\n\n    this.getWordsHint = text => {\n      let count = text.split(/\\s/).length;\n      if (count < this.MIN_WORDS) return `You have to write ${this.MIN_WORDS - count} more words`;\n      if (count >= this.MIN_WORDS) return `You can write up to ${this.MAX_WORDS - count} more words`;\n    };\n\n    this.predict = () => {\n      if (this.MAX_WORDS - this.state.text.split(/\\s/).length < 0) return;\n      this.setState({\n        loading: true,\n        prediction: null\n      });\n      axios({\n        method: 'POST',\n        url: 'http://8e04a3fc.ngrok.io/predict',\n        data: {\n          article: this.state.text\n        }\n      }).then(res => {\n        console.log(res);\n        this.setState({\n          prediction: res.data.prediction,\n          loading: false,\n          original: res.data.original,\n          pos_tagged: res.data.pos_tagged,\n          preprocessed: res.data.preprocessed\n        });\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Fake News Classifier\"), React.createElement(\"textarea\", {\n      autoFocus: true,\n      placeholder: \"News to classify?\",\n      disabled: this.state.loading,\n      value: this.state.text,\n      onChange: this.updateInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"hint\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \" \", this.state.wordsHint), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      disabled: this.state.loading,\n      className: \"random\",\n      onClick: this.random,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Load random News from test dataset ? \"), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, \"Click here\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      disabled: this.state.loading || this.MIN_WORDS - this.state.text.split(/\\s/).length > 0 || this.MAX_WORDS - this.state.text.split(/\\s/).length < 0,\n      className: \"cta\",\n      onClick: this.predict,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \" Predict \"), this.state.loading ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Classifying ...\") : '', this.state.error ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"ERROR\") : '', React.createElement(\"h1\", {\n      className: this.state.prediction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, this.state.prediction)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Model, {\n      prediction: this.state.prediction,\n      original: this.state.original,\n      pos_tagged: this.state.pos_tagged,\n      preprocessed: this.state.preprocessed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/home/chayma/Desktop/FakeNews/webapp/fakenews-ui/src/components/js/nlpinterface.js"],"names":["React","Model","axios","NLPInterface","Component","MIN_WORDS","MAX_WORDS","state","text","wordsHint","loading","error","prediction","original","pos_tagged","preprocessed","random","get","then","res","data","setState","getWordsHint","updateInput","target","value","count","split","length","predict","method","url","article","console","log","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Model } from './model';\nimport axios from 'axios';\nimport './../css/nlpinterface.scss';\nexport class NLPInterface extends React.Component {\n\n  MIN_WORDS = 25;\n  MAX_WORDS = 3500;\n\n  state = {\n    text: '',\n    wordsHint: `You have to write at least ${this.MIN_WORDS} words`,\n    loading: false,\n    error: false,\n    prediction: null,\n    original: null,\n    pos_tagged: null,\n    preprocessed: null,\n  }\n\n  random = () => axios.get(\"http://8e04a3fc.ngrok.io/random\")\n    .then(res => {\n        const data = res.data;\n        this.setState({\n            text: data.text, \n            wordsHint: this.getWordsHint(data.text), \n            prediction: null,\n            original: null,\n            pos_tagged: null,\n            preprocessed: null,\n    })\n})\n\n  updateInput = ({ target: { value } }) => this.setState({ text: value, prediction: null, wordsHint: this.getWordsHint(value) });\n\n  getWordsHint = (text) => {\n    let count = text.split(/\\s/).length;\n    if (count < this.MIN_WORDS) return `You have to write ${this.MIN_WORDS - count} more words`\n    if (count >= this.MIN_WORDS) return `You can write up to ${this.MAX_WORDS - count} more words`\n  }\n  predict = () => {\n    if (this.MAX_WORDS - this.state.text.split(/\\s/).length < 0) return;\n\n    this.setState({ loading: true, prediction: null });\n    axios({\n      method: 'POST',\n      url: 'http://8e04a3fc.ngrok.io/predict',\n      data:\n      {\n        article : this.state.text\n      }\n    })\n    .then (res => {\n        console.log(res)\n        this.setState({prediction: res.data.prediction, loading: false, original: res.data.original, pos_tagged: res.data.pos_tagged, preprocessed: res.data.preprocessed})\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div>\n        <h1>Fake News Classifier</h1>\n        <textarea autoFocus placeholder= 'News to classify?' disabled={this.state.loading} value={this.state.text} onChange={this.updateInput}>\n        </textarea><br/>\n\n        <span className=\"hint\"> {this.state.wordsHint}</span><br/>\n\n        <button disabled={this.state.loading} className=\"random\" onClick={this.random}>\n          <p>Load random News from test dataset ? </p><span>Click here</span><br/>\n        </button>\n        <button disabled={\n          this.state.loading ||\n          this.MIN_WORDS - this.state.text.split(/\\s/).length > 0 ||\n          this.MAX_WORDS - this.state.text.split(/\\s/).length < 0} className=\"cta\" onClick={this.predict}> Predict </button>\n\n        {this.state.loading ? <h1>Classifying ...</h1> : ''}\n\n        {this.state.error ? <h1>ERROR</h1> : ''}\n\n        <h1 className={this.state.prediction}>\n          {this.state.prediction}\n        </h1>\n          </div>\n          <div>\n        <Model\n          prediction={this.state.prediction}\n          original={this.state.original}\n          pos_tagged={this.state.pos_tagged}\n          preprocessed={this.state.preprocessed}\n        />\n        </div>\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}