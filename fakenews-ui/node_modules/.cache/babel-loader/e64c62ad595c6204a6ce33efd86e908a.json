{"ast":null,"code":"var _jsxFileName = \"/home/chayma/Desktop/FakeNews/webapp/fakenews-ui/src/components/js/nlpinterface.js\";\nimport React from 'react';\nimport { Model } from './model';\nimport axios from 'axios';\nimport './../css/nlpinterface.scss';\nexport class NLPInterface extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.MIN_WORDS = 25;\n    this.MAX_WORDS = 3500;\n    this.state = {\n      text: '',\n      wordsHint: `You have to write at least ${this.MIN_WORDS} words`,\n      loading: false,\n      error: false,\n      prediction: null\n    };\n\n    this.random = () => axios.get(\"http://8e04a3fc.ngrok.io/random\").then(res => {\n      const data = res.data;\n      this.setState({\n        text: data.text,\n        wordsHint: this.getWordsHint(data.text),\n        prediction: null,\n        original: null,\n        pos_tagged: null,\n        preprocessed: null\n      });\n    });\n\n    this.updateInput = ({\n      target: {\n        value\n      }\n    }) => this.setState({\n      text: value,\n      prediction: null,\n      wordsHint: this.getWordsHint(value)\n    });\n\n    this.getWordsHint = text => {\n      let count = text.split(/\\s/).length;\n      if (count < this.MIN_WORDS) return `You have to write ${this.MIN_WORDS - count} more words`;\n      if (count >= this.MIN_WORDS) return `You can write up to ${this.MAX_WORDS - count} more words`;\n    };\n\n    this.predict = () => {\n      if (this.MAX_WORDS - this.state.text.split(/\\s/).length < 0) return;\n      this.setState({\n        loading: true,\n        prediction: null\n      });\n      axios({\n        method: 'POST',\n        url: 'http://8e04a3fc.ngrok.io/predict',\n        data: {\n          article: this.state.text\n        }\n      }).then(res => {\n        console.log(res);\n        this.setState({\n          prediction: res.data.prediction,\n          loading: false,\n          original: res.data.original,\n          pos_tagged: res.data.pos_tagged,\n          preprocessed: res.data.preprocessed\n        });\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Fake News Classifier\"), React.createElement(\"textarea\", {\n      placeholder: \"News to classify?\",\n      disabled: this.state.loading,\n      value: this.state.text,\n      onChange: this.updateInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"hint\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \" \", this.state.wordsHint), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      disabled: this.state.loading,\n      className: \"random\",\n      onClick: this.random,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Load random News from test dataset ? \"), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, \"Click here\")), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"button-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      disabled: this.state.loading || this.MIN_WORDS - this.state.text.split(/\\s/).length > 0 || this.MAX_WORDS - this.state.text.split(/\\s/).length < 0,\n      className: \"cta\",\n      onClick: this.predict,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \" Predict \")), this.state.loading ? React.createElement(\"h1\", {\n      className: \"loading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Classifying ...\") : '', this.state.error ? React.createElement(\"h1\", {\n      className: \"loading\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"ERROR\") : '', React.createElement(\"h1\", {\n      className: this.state.prediction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, this.state.prediction), React.createElement(Model, {\n      prediction: this.state.prediction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/chayma/Desktop/FakeNews/webapp/fakenews-ui/src/components/js/nlpinterface.js"],"names":["React","Model","axios","NLPInterface","Component","MIN_WORDS","MAX_WORDS","state","text","wordsHint","loading","error","prediction","random","get","then","res","data","setState","getWordsHint","original","pos_tagged","preprocessed","updateInput","target","value","count","split","length","predict","method","url","article","console","log","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,4BAAP;AACA,OAAO,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CAA2C;AAAA;AAAA;AAAA,SAEhDC,SAFgD,GAEpC,EAFoC;AAAA,SAGhDC,SAHgD,GAGpC,IAHoC;AAAA,SAKhDC,KALgD,GAKxC;AACNC,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,SAAS,EAAG,8BAA6B,KAAKJ,SAAU,QAFlD;AAGNK,MAAAA,OAAO,EAAE,KAHH;AAINC,MAAAA,KAAK,EAAE,KAJD;AAKNC,MAAAA,UAAU,EAAE;AALN,KALwC;;AAAA,SAahDC,MAbgD,GAavC,MAAMX,KAAK,CAACY,GAAN,CAAU,iCAAV,EACZC,IADY,CACPC,GAAG,IAAI;AACT,YAAMC,IAAI,GAAGD,GAAG,CAACC,IAAjB;AACA,WAAKC,QAAL,CAAc;AACVV,QAAAA,IAAI,EAAES,IAAI,CAACT,IADD;AAEVC,QAAAA,SAAS,EAAE,KAAKU,YAAL,CAAkBF,IAAI,CAACT,IAAvB,CAFD;AAGVI,QAAAA,UAAU,EAAE,IAHF;AAIVQ,QAAAA,QAAQ,EAAE,IAJA;AAKVC,QAAAA,UAAU,EAAE,IALF;AAMVC,QAAAA,YAAY,EAAE;AANJ,OAAd;AAQP,KAXgB,CAbiC;;AAAA,SA0BhDC,WA1BgD,GA0BlC,CAAC;AAAEC,MAAAA,MAAM,EAAE;AAAEC,QAAAA;AAAF;AAAV,KAAD,KAA2B,KAAKP,QAAL,CAAc;AAAEV,MAAAA,IAAI,EAAEiB,KAAR;AAAeb,MAAAA,UAAU,EAAE,IAA3B;AAAiCH,MAAAA,SAAS,EAAE,KAAKU,YAAL,CAAkBM,KAAlB;AAA5C,KAAd,CA1BO;;AAAA,SA4BhDN,YA5BgD,GA4BhCX,IAAD,IAAU;AACvB,UAAIkB,KAAK,GAAGlB,IAAI,CAACmB,KAAL,CAAW,IAAX,EAAiBC,MAA7B;AACA,UAAIF,KAAK,GAAG,KAAKrB,SAAjB,EAA4B,OAAQ,qBAAoB,KAAKA,SAAL,GAAiBqB,KAAM,aAAnD;AAC5B,UAAIA,KAAK,IAAI,KAAKrB,SAAlB,EAA6B,OAAQ,uBAAsB,KAAKC,SAAL,GAAiBoB,KAAM,aAArD;AAC9B,KAhC+C;;AAAA,SAiChDG,OAjCgD,GAiCtC,MAAM;AACd,UAAI,KAAKvB,SAAL,GAAiB,KAAKC,KAAL,CAAWC,IAAX,CAAgBmB,KAAhB,CAAsB,IAAtB,EAA4BC,MAA7C,GAAsD,CAA1D,EAA6D;AAE7D,WAAKV,QAAL,CAAc;AAAER,QAAAA,OAAO,EAAE,IAAX;AAAiBE,QAAAA,UAAU,EAAE;AAA7B,OAAd;AACAV,MAAAA,KAAK,CAAC;AACJ4B,QAAAA,MAAM,EAAE,MADJ;AAEJC,QAAAA,GAAG,EAAE,kCAFD;AAGJd,QAAAA,IAAI,EACJ;AACEe,UAAAA,OAAO,EAAG,KAAKzB,KAAL,CAAWC;AADvB;AAJI,OAAD,CAAL,CAQCO,IARD,CAQOC,GAAG,IAAI;AACViB,QAAAA,OAAO,CAACC,GAAR,CAAYlB,GAAZ;AACA,aAAKE,QAAL,CAAc;AAACN,UAAAA,UAAU,EAAEI,GAAG,CAACC,IAAJ,CAASL,UAAtB;AAAkCF,UAAAA,OAAO,EAAE,KAA3C;AAAkDU,UAAAA,QAAQ,EAAEJ,GAAG,CAACC,IAAJ,CAASG,QAArE;AAA+EC,UAAAA,UAAU,EAAEL,GAAG,CAACC,IAAJ,CAASI,UAApG;AAAgHC,UAAAA,YAAY,EAAEN,GAAG,CAACC,IAAJ,CAASK;AAAvI,SAAd;AACH,OAXD;AAYD,KAjD+C;AAAA;;AAmDhDa,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,EAEE;AAAU,MAAA,WAAW,EAAE,mBAAvB;AAA2C,MAAA,QAAQ,EAAE,KAAK5B,KAAL,CAAWG,OAAhE;AAAyE,MAAA,KAAK,EAAE,KAAKH,KAAL,CAAWC,IAA3F;AAAiG,MAAA,QAAQ,EAAE,KAAKe,WAAhH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHb,EAKE;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAyB,KAAKhB,KAAL,CAAWE,SAApC,CALF,EAKuD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALvD,EAOE;AAAQ,MAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWG,OAA7B;AAAsC,MAAA,SAAS,EAAC,QAAhD;AAAyD,MAAA,OAAO,EAAE,KAAKG,MAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CADF,EAC8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAD9C,CAPF,EASW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATX,EAUE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA;AAAQ,MAAA,QAAQ,EACd,KAAKN,KAAL,CAAWG,OAAX,IACA,KAAKL,SAAL,GAAiB,KAAKE,KAAL,CAAWC,IAAX,CAAgBmB,KAAhB,CAAsB,IAAtB,EAA4BC,MAA7C,GAAsD,CADtD,IAEA,KAAKtB,SAAL,GAAiB,KAAKC,KAAL,CAAWC,IAAX,CAAgBmB,KAAhB,CAAsB,IAAtB,EAA4BC,MAA7C,GAAsD,CAHxD;AAG2D,MAAA,SAAS,EAAC,KAHrE;AAG2E,MAAA,OAAO,EAAE,KAAKC,OAHzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADA,CAVF,EAgBG,KAAKtB,KAAL,CAAWG,OAAX,GAAqB;AAAI,MAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAArB,GAAoE,EAhBvE,EAkBG,KAAKH,KAAL,CAAWI,KAAX,GAAmB;AAAI,MAAA,SAAS,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAnB,GAAwD,EAlB3D,EAoBE;AAAI,MAAA,SAAS,EAAE,KAAKJ,KAAL,CAAWK,UAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKL,KAAL,CAAWK,UADd,CApBF,EAwBE,oBAAC,KAAD;AACE,MAAA,UAAU,EAAE,KAAKL,KAAL,CAAWK,UADzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxBF,CADF;AA8BD;;AAlF+C","sourcesContent":["import React from 'react';\nimport { Model } from './model';\nimport axios from 'axios';\nimport './../css/nlpinterface.scss';\nexport class NLPInterface extends React.Component {\n\n  MIN_WORDS = 25;\n  MAX_WORDS = 3500;\n\n  state = {\n    text: '',\n    wordsHint: `You have to write at least ${this.MIN_WORDS} words`,\n    loading: false,\n    error: false,\n    prediction: null,\n  }\n\n  random = () => axios.get(\"http://8e04a3fc.ngrok.io/random\")\n    .then(res => {\n        const data = res.data;\n        this.setState({\n            text: data.text, \n            wordsHint: this.getWordsHint(data.text), \n            prediction: null,\n            original: null,\n            pos_tagged: null,\n            preprocessed: null,\n    })\n})\n\n  updateInput = ({ target: { value } }) => this.setState({ text: value, prediction: null, wordsHint: this.getWordsHint(value) });\n\n  getWordsHint = (text) => {\n    let count = text.split(/\\s/).length;\n    if (count < this.MIN_WORDS) return `You have to write ${this.MIN_WORDS - count} more words`\n    if (count >= this.MIN_WORDS) return `You can write up to ${this.MAX_WORDS - count} more words`\n  }\n  predict = () => {\n    if (this.MAX_WORDS - this.state.text.split(/\\s/).length < 0) return;\n\n    this.setState({ loading: true, prediction: null });\n    axios({\n      method: 'POST',\n      url: 'http://8e04a3fc.ngrok.io/predict',\n      data:\n      {\n        article : this.state.text\n      }\n    })\n    .then (res => {\n        console.log(res)\n        this.setState({prediction: res.data.prediction, loading: false, original: res.data.original, pos_tagged: res.data.pos_tagged, preprocessed: res.data.preprocessed})\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Fake News Classifier</h1>\n        <textarea placeholder= 'News to classify?' disabled={this.state.loading} value={this.state.text} onChange={this.updateInput}>\n        </textarea><br/>\n\n        <span className=\"hint\"> {this.state.wordsHint}</span><br/>\n\n        <button disabled={this.state.loading} className=\"random\" onClick={this.random}>\n          <p>Load random News from test dataset ? </p><span>Click here</span>\n        </button><br/>\n        <div className=\"button-container\">\n        <button disabled={\n          this.state.loading ||\n          this.MIN_WORDS - this.state.text.split(/\\s/).length > 0 ||\n          this.MAX_WORDS - this.state.text.split(/\\s/).length < 0} className=\"cta\" onClick={this.predict}> Predict </button></div>\n\n        {this.state.loading ? <h1 className=\"loading\">Classifying ...</h1> : ''}\n\n        {this.state.error ? <h1 className=\"loading\">ERROR</h1> : ''}\n\n        <h1 className={this.state.prediction}>\n          {this.state.prediction}\n        </h1>\n\n        <Model\n          prediction={this.state.prediction}\n        />\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}